#version 400 core

in vec3 colour;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;

out vec4 outColour;

uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform vec3 skyColour;

void main(void){
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	
	for (int i = 0; i < 4; i++) {
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDot1 = dot(unitNormal, unitLightVector);
		float brightness = max(nDot1, 0.0);
		totalDiffuse = totalDiffuse + (brightness * lightColour[i]) / attFactor;
	}
	totalDiffuse = (max(totalDiffuse, 0.0) + 0.8) / 1.8;

	outColour = vec4(colour, 1.0) * vec4(totalDiffuse, 1.0);
	outColour = mix(vec4(skyColour, 1.0), outColour, visibility);
}