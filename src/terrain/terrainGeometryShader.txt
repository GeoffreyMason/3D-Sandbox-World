#version 400 core

layout (triangles) in;
layout (triangle_strip,  max_vertices = 3) out;

in vec3 vertexColour[];
in vec3 surfaceNormal[];
in vec3 toLightVector1[];
in vec3 toLightVector2[];
in vec3 toLightVector3[];
in vec3 toLightVector4[];
in float vertexVisibility[];
in vec3 toCameraVector[];
in vec4 shadowCoords[];
in vec3 vertexPosition[];
in vec4 worldPosition[];

out vec3 gsColour;
out float gsVisibility;
out vec3 gsSurfaceNormal;
out vec3 gsToLightVector1;
out vec3 gsToLightVector2;
out vec3 gsToLightVector3;
out vec3 gsToLightVector4;
out vec3 gsToCameraVector;
out vec4 gsShadowCoords;
out vec3 gsPosition;

uniform vec4 plane;

void main() {

	vec3 colour = vertexColour[0];
	vec3 A = vertexPosition[2].xyz - vertexPosition[0].xyz;
    vec3 B = vertexPosition[1].xyz - vertexPosition[0].xyz;
    
    //mat4 normalMatrix = transpose(inverse(modelViewMatrix));
    vec3 normal = - normalize(cross(A, B));

    gl_Position = gl_in[0].gl_Position;
    gsColour = colour;
    gsVisibility = vertexVisibility[0];
    
    //gsSurfaceNormal = surfaceNormal[0];
    gsSurfaceNormal = normal;
	gsToLightVector1 = toLightVector1[0];
	gsToLightVector2 = toLightVector2[0];
	gsToLightVector3 = toLightVector3[0];
	gsToLightVector4 = toLightVector4[0];
	gsToCameraVector = toCameraVector[0];
	gsShadowCoords = shadowCoords[0];
	gsPosition = vertexPosition[0];
	gl_ClipDistance[0] = dot(worldPosition[0], plane);
    EmitVertex();

    gl_Position = gl_in[1].gl_Position;
    gsColour = colour;
    gsVisibility = vertexVisibility[0];
    //gsSurfaceNormal = surfaceNormal[0];
    gsSurfaceNormal = normal;
	gsToLightVector1 = toLightVector1[1];
	gsToLightVector2 = toLightVector2[1];
	gsToLightVector3 = toLightVector3[1];
	gsToLightVector4 = toLightVector4[1];
	gsToCameraVector = toCameraVector[1];
	gsShadowCoords = shadowCoords[1];
	gsPosition = vertexPosition[1];
	gl_ClipDistance[0] = dot(worldPosition[1], plane);
    EmitVertex();

    gl_Position = gl_in[2].gl_Position;
    gsColour = colour;
    gsVisibility = vertexVisibility[0];
    //gsSurfaceNormal = surfaceNormal[0];
    gsSurfaceNormal = normal;
	gsToLightVector1 = toLightVector1[2];
	gsToLightVector2 = toLightVector2[2];
	gsToLightVector3 = toLightVector3[2];
	gsToLightVector4 = toLightVector4[2];
	gsToCameraVector = toCameraVector[2];
	gsShadowCoords = shadowCoords[2];
	gsPosition = vertexPosition[2];
	gl_ClipDistance[0] = dot(worldPosition[2], plane);
    EmitVertex();
    EndPrimitive();
}